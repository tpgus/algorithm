/*
여행가 A는 N * N 크기의 정사각형 공간 위에 서 있다. 이 공간은 1 * 1 크기의 정사각형으로 나누어져 있다.
가장 왼쪽 위 좌표는 (1,1)이며, 가장 오른쪽 아래 좌표는 (N,N)에 해당한다. 여행가 A는 상,하,좌,우 방향으로 이동할 수 있으며,
시작 좌표는 항상 (1,1)이다. 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있다.

계획서에는 하나의 줄에 띄어쓰기를 기준으로 L, R, U, D 중 하나의 문자가 반복적으로 적혀있다.
각각의 문자는 왼쪽, 오른쪽, 위, 아래 방향으로 한 칸씩 이동하는 것을 의미한다.

이때, 여행가 A가 N * N 크기의 정사각형 공간을 벗어나는 움직임은 '무시'된다.

계획서가 주어졌을 때, 여행가 A가 최종적으로 도착할 지점의 좌표를 출력하는 프로그램을 구현하시오.

[입력]
-첫 번째 인자
공간의 크기를 나타내는 N (1 <= N <= 100)

-두 번째 인자
여행가 A가 이동할 계획서의 내용

[출력]
여행가 A가 최종적으로 도착할 지점의 좌표 (X,Y)를 공백으로 구분한다.
*/

function foo(N, plan) {
  const dir = {
    //방향에 따라 현재 좌표값에 더해줄 룩업테이블
    U: [-1, 0], //참고로 배열과 실제 수학에서 사용하는 x,y의 좌표는 반대임
    D: [1, 0],
    R: [0, 1],
    L: [0, -1],
  };

  let x = 1;
  let y = 1;
  for (let i of plan) {
    //계획서의 값들을 모두 순회하는 반복문
    const [mvY, mvX] = dir[i]; //방향에 따라 룩업 테이블에서 값을 가져와서 현재 좌표에 더한다.
    x += mvX;
    y += mvY;

    if (x < 1 || x > N || y < 1 || y > N) {
      //엣지 케이스 검사
      x -= mvX;
      y -= mvY;
    }
  }
  return [y, x]; //실제 수학에서의 2차원상 좌표와 배열의 좌표는 x,y가 반대이다.
}
let result = foo(5, ["R", "R", "R", "U", "D", "D"]);
console.log(result);
