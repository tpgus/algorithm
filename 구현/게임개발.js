/*
세현이는 게임 캐릭터가 맵 안에서 움직이는 시스템을 개발 중이다.
캐릭터가 있는 장소는 1 * 1 크기의 정사각형으로 이루어진 N * M 크기의 직사각형으로, 각각의 칸은 육지 또는 바다이다.
캐릭터는 동서남북 중 한 곳을 바라본다.

맵의 각 칸은 (A,B)로 나타낼 수 있고, A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수이다.
캐릭터는 상하좌우로 움직일 수 있고, 바다로 되어 있는 공간에는 갈 수 없다.
캐릭터의 움직임을 설정하기 위해 정해 놓은 메뉴얼은 이러하다.

1.현재 위치에서 현재 방향을 기준으로 왼쪽 방향부터 차례대로 갈 곳을 정한다.
2.캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸을 전진한다. 
왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로만 회전만 수행하고 1단계로 돌아간다.
3.만약 네 방향 모두 이미 가본 칸이거나 바다로 되어 있는 칸인 경우에는, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고
1단계로 돌아간다. 단, 이때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을 멈춘다.

이때, 캐릭터가 방문한 칸의 수를 출력하는 코드를 구현하시오.

[입력]
첫 번째 인자 : 현재 좌표와 방향
두 번째 인자 : 바다와 육지를 나타내는 2차원 배열의 맵

[출력]
캐릭터가 방문한 칸의 수

[접근 방법]
사실, 내가 푼 방법이 맞는지 모르겠다. (정답에 쓰여진 코드와는 많이 다르다.)
맵을 바꿔가며 수행해 보아도 정답은 같다. 그래서 맞지 않나 싶다.

처음에는 이전에 맵(좌표) 문제들을 풀듯이 방향에 따라 이동하게 된다면, 변화되는 좌표 값을 설정한 룩업테이블을 설정했다.
근데, 이 문제는 기존 문제들과 다른 점이, 현재 좌표와 방향을 기준으로
'왼쪽 방향'을 먼저 살펴보고 왼쪽 방향으로 이동할 수 있다면 왼쪽으로 이동하는 것이다.
즉, 이전 문제들은 무조건 바라보는 방향으로만 이동하는 것인데, 이 문제는 현재 바라보는 방향의 왼쪽 방향이 이동하는 방향이다.

그래서 룩업 테이블을 기존과 조금 다르게 변형시켜, 현재 방향에서 왼쪽으로 이동할 때의 변화되는 좌표값을 설정했다.

그리고 문제는 0이면 북쪽, 1이면 동쪽, 2이면 남쪽, 3이면 서쪽을 의미한다. (시계방향) 0 -> 1 -> 2 -> 3
하지만 이동할 때 살펴보는 순서는 반 시계방향이다. 즉 현재 방향이 0이라면 0 -> 3 -> 2 -> 1이 된다.
반 시계 방향대로 반복문을 돌기 위해 룩업 테이블을 약간 변형했다. 
(0 1 2 3 순서대로 돌 수 있게끔 다시 매핑해 주었다.)


*/

function foo(curr, map) {
    const mv = { //룩업 테이블 (핵심)
        '0': [0, -1],
        '1': [1, 0],
        '2': [0, 1],
        '3': [-1, 0]
    }

    let count = 1;
    let nowX = curr[0];
    let nowY = curr[1];

    for (let key = 0; key < 4; key++) {
        let [mvY, mvX] = mv[key];
        if (map[nowY + mvY][nowX + mvX] !== 1) { //이동 했을 때 그 좌표의 값이 1이 아니라면, 이동할 수 있다.
            map[nowY][nowX] = 1;                 //1이라면 아무 동작없이 반복문만 다음 단계로 진행
            nowX += mvX;
            nowY += mvY;
            count++;
            key = 0; // 핵심 (이동 한 뒤, 다시 모든 방향을 살펴보기 위해, key를 0으로 설정 반복문이 처음부터 다시 시작)
        }
    }
    return count;
}


const curr = [1, 1, 1];
const map = [
    [1, 1, 1, 1,1],
    [1, 0, 0, 1,1],
    [1, 1, 1, 0,1],
    [1, 1, 1, 1,1],
    [1, 1, 1, 1,1]
]
const result = foo(curr, map);
console.log(result);